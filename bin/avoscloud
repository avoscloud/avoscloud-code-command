#!/usr/bin/env node

/**
 * AVOS Cloud command-line tool
 * Author: dennis zhuang<xzhuang@avoscloud.com>
 * Project: https://github.com/avoscloud/avoscloud-code-command
 * Created by : Emacs JavaScript Mode
 */

var nodemon = require('nodemon'),
  commander = require('./commander'),
  run = require('./run'),
  runtime = require('../lib/runtime'),
  testServer = require('../lib/testUtilServer'),
  path = require('path'),
  fs = require('fs'),
  color = require('cli-color'),
  childProcess = require('child_process'),
  exec = require('child_process').exec;

function exitWith(err) {
    console.error('[ERROR] ' + err);
    process.exit(1);
}

var callback = function(err){
  if(!err) {
    return process.exit(0);
  }

  var exitCode = err.exitCode || 1;
  if (!err.cause) {
    console.log("错误：", err.message || err);
  } else if (!err.cause.responseText) {
    console.log("抱歉，%s 失败：%s", err.action, err.cause);
  } else {
    var responseText = err.cause.responseText;
    try{
      var eobj = JSON.parse(responseText);
      console.log("抱歉，%s 失败：%d\n%s", err.action, eobj.code, eobj.error);
    } catch(e){
      var isHtml = /<title>([\s\S]+)<\/title>/i;
      if(isHtml.test(responseText)){
        var title = isHtml.exec(responseText);
        console.log("抱歉，%s 失败：'%s'", err.action, title[1]);
      } else {
        console.log("抱歉，%s 失败：'%s'", err.action, responseText);
      }
    }
  }
  console.log("查看使用帮助：avoscloud -h，或查看相关文档：https://leancloud.cn/docs/cloud_code_commandline.html");
  process.exit(exitCode);
};

var program = commander.parse_args(process.argv);

var CMD = program.args[0];
var CLOUD_PATH = path.resolve(program.filepath || '.');

if (!CLOUD_PATH.match(/.*\/$/)) {
  CLOUD_PATH = CLOUD_PATH + path.sep;
}

process.chdir(CLOUD_PATH);
var args = process.argv.slice(2);

run.setProject(program.project);
run.setCloudPath(CLOUD_PATH);
run.setPort(program.port);
run.setHost(program.host);

//Query lastet commandline version.
run.queryLatestVersion();
//Send statistics data.
run.sendStats(CMD);
//Execute command.

if(CMD) {
  switch (CMD) {
    case 'new':
      run.createNewProject(callback);
      break;

    case "deploy":
      run.logProjectHome();
      if (program.git) {
        run.deployGitCloudCode(program.revision || 'master', program.giturl, callback);
      } else {
        if (path.resolve(CLOUD_PATH) != path.resolve('.'))
          return exitWith("'avoscloud deploy' 命令必须在 LeanEngine 项目目录中使用");
        runtime.detect(CLOUD_PATH, function(err, runtimeInfo) {
          if (err) {
            return callback(err);
          }
          run.deployLocalCloudCode(runtimeInfo, CLOUD_PATH, program.log, callback);
        });
      }
      break;

    case "undeploy":
      run.logProjectHome();
      run.undeployCloudCode(callback);
      break;

    case "publish":
      run.logProjectHome();
      run.publishCloudCode(callback);
      break;

    case "status":
      run.logProjectHome();
      run.queryStatus(callback);
      break;

    case 'logs':
      run.logProjectHome();
      run.viewCloudLog(program.lines, program.tailf, null, callback);
      break;

    case "upload":
      run.initAVOSCloudSDK();
      run.logProjectHome();
      if (!program.args[1]) {
        console.log("请使用：avoscloud upload <文件或目录>");
        process.exit(1);
      }
      program.args.shift();
      run.importFiles(program.args, function(err) {
        if (err)
          console.log(err);
      }, callback);
      break;

    case "app":
      //app <list>
      var isList = program.args[1] == 'list';
      run.appStatus(isList);
      callback();
      break;

    case "add":
      // add <name> <app id>
      var name = program.args[1];
      var appId = program.args[2];
      if (!name)
        return exitWith("请使用：avoscloud add <name> <app id>");
      if (!appId)
        return exitWith("请使用：avoscloud add <name> <app id>");
      run.addApp(name, appId);
      callback();
      break;

    case "rm":
      //rm <name>
      var name = program.args[1];
      if (!name)
        return exitWith("请使用：avoscloud rm <name>");
      run.removeApp(name);
      callback();
      break;

    case "checkout":
      //checkout <name>
      var name = program.args[1];
      if (!name)
        return exitWith("请使用：avoscloud checkout <name>");
      run.checkoutApp(name);
      callback();
      break;

    case "cql":
      run.doCloudQuery(callback);
      break;

    case "redis":
      var db = '0';
      if (program.args.length < 2 || program.args.length > 3) {
         return exitWith("请使用：\n" +
                         "    avoscloud redis list: 查看当前应用的 Redis 实例\n" +
                         "    avoscloud redis <instance> [db]: 连接 Redis，db 默认为 0");
      } else if (program.args.length == 3) {
         db = program.args[2];
      }
      if(program.args[1] === 'list') {
        run.getRedisInstances();
      } else {
        run.doRedisClient(program.args[1], db);
      }
      break;

    case "clear":
      run.deleteMasterKeys();
      callback();
      break;

    case "search":
      if (!program.args[1]) {
        console.log("请使用：avoscloud search <关键字>");
        process.exit(1);
      }
      program.args.shift();
      exec('open https://leancloud.cn/search.html?q=' + encodeURIComponent(program.args.join(' ')));
      callback();
      break;

    case "lint":
      run.doLint(callback);
      break;

    default:
      program.help();
      break;
  }
} else {
  runtime.detect(CLOUD_PATH, function(err, runtimeInfo) {
    if (err) {
      return callback(err);
    }
    runtimeInfo.setDebug(program.debug);
    var monconfig = runtimeInfo.getMonconfig(args);
    console.log(color.green('提示：您可以敲入 rs 命令并回车来重启本进程'));
    nodemon(monconfig);
    nodemon.on('restart', function (files) {
        console.log('[INFO] 因为文件变更而项目重启：', files);
    });
    if (runtimeInfo.runtime != 'cloudcode') {
      run.initMasterKey(function(masterKey) {
        var app = run.getAppSync();
        var testServerPort = parseInt(run.getPort()) + 1;
        var testServerHost = run.getHost();
        testServer.set('leanenginePort', run.getPort());
        testServer.set('port', testServerPort);
        testServer.set('host', testServerHost);
        testServer.set('appId', app.appId);
        testServer.set('appKey', masterKey);
        testServer.set('masterKey', masterKey);
        console.log(color.green('提示：您可以使用 http://' + testServerHost + ':' + testServerPort + ' 测试 Cloud 函数'));
        testServer.listen(testServerPort, testServerHost);
      });
    }
  });
}
