#!/usr/bin/env node

/**
 * AVOS Cloud command-line tool
 * Author: dennis zhuang<xzhuang@avoscloud.com>
 * Project: https://github.com/avoscloud/CloudCodeMockSDK
 * Created by : Emacs JavaScript Mode
 */

var path = require('path');
var fs = require('fs');
var lib = path.join(path.dirname(fs.realpathSync(__filename)), '../lib');
var exec = require('child_process').exec;
var fstream = require('fstream'),
tar = require('tar'),
zlib = require('zlib');
var os = require('os');
var _s = require('underscore.string'),
_ = require('underscore');
var http = require('http');
var program = require('commander');
var AV = require('avoscloud-sdk').AV;
var qiniu = require('qiniu');
var util = require(lib + '/util');
var AdmZip = require('adm-zip');
var promptly = require('promptly');
var mime = require('mime');

var tmpdir = os.tmpdir();
if (!tmpdir.match(/.*\/$/)) {
	tmpdir = tmpdir + path.sep;
}

var version = JSON.parse(fs.readFileSync(path.join(path.dirname(fs.realpathSync(__filename)), ".." + path.sep + "package.json"))).version;
program
	.version(version)
	.usage("[options] <cmd> \n\n  Valid commands: \n    deploy: 部署云代码到 AVOS Cloud 平台开发环境\n    undeploy: 从 AVOS Cloud 平台清除云代码部署，包括生产环境和开发环境\n    status: 查询当前部署状态\n    search <keyword>: 根据关键字查询开发文档\n    publish: 发布开发环境代码到生产环境\n    new: 创建云代码项目\n    logs: 查看云代码日志\n    clear: 清除本地状态，在输入 app id 或者 master key 错误的情况下使用\n    upload <file-or-directory> 导入文件到 AVOS Cloud 平台，如果是目录，则会将该目录下的文件递归导入。")
	.option('-f,--filepath <path>', '本地云代码项目根路径，默认是当前目录。')
	.option('-g, --git', '使用定义在管理平台的 git 仓库或者 -u 指定的 git 仓库部署云代码，默认使用本地代码部署。')
	.option('-l, --local', '使用本地代码部署云代码，该选项是默认选中。')
	.option('-o, --log <log>', '本次部署的提交日志，仅对从本地部署有效。')
	.option('-n, --lines <lines>', '查看多少行最新的云代码日志，默认 10 行。', 10)
	.option('-t, --tailf', '自动刷新云代码日志，结合 logs 命令使用。', 1)
	.option('-r, --revision <revision>', 'git 的版本号，仅对从 git 仓库部署有效。')
	.parse(process.argv);

function getUserHome() {
	return process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;
}

function deleteMasterKeys(){
	var home = getUserHome();
	if (!home)
		throw "Could not find user home directory";
	var avoscloudKeysFile = home + '/.avoscloud_keys'
	console.log("删除 " + avoscloudKeysFile + " ...");
	fs.truncateSync(avoscloudKeysFile,0);
	console.log("Clear done!");
}

function initMasterKey(done) {
	var home = getUserHome();
	if (!home)
		throw "Could not find user home directory";
	var avoscloudKeysFile = home + path.sep + '.avoscloud_keys'
	fs.exists(avoscloudKeysFile, function(exists) {
		writeMasterKey = function(data, cb) {
			promptly.password('请输入应用的 Master Key (可从开发者平台的应用设置里找到): ', function (err, answer) {
			    if (!answer || answer.trim() == '')
					throw "无效的 Master Key"
			    data = data || {}
				data[AV.applicationId] = answer;
				//file mode is 0600
				fs.writeFile(avoscloudKeysFile, JSON.stringify(data), {
					mode: 384
				}, function(err) {
					if (err)
						throw err;
					cb(answer);
				});
			});
		};
		readMasterKey = function() {
			fs.readFile(avoscloudKeysFile, 'utf-8', function(err, data) {
				if (err)
					throw err;
				if(data.trim() == ''){
					data = '{}';
				}
				var keys = JSON.parse(data);
				var masterKey = keys[AV.applicationId];
				if (!masterKey) {
					writeMasterKey(keys, function(masterKey) {
						AV.initialize(AV.applicationId, masterKey);
						done(masterKey);
					});
				} else {
					AV.initialize(AV.applicationId, masterKey);
					done(masterKey);
				}
			});
		}
		if (exists) {
			readMasterKey();
		} else {
			writeMasterKey(null, function(masterKey) {
				AV.initialize(AV.applicationId, masterKey);
				done(masterKey);
			});
		}
	});
}

function bucketDomain(bucket){
	if(bucket == 'paas_files')
		return 'paas-files';
	else
		return 'ac-' + bucket;
}

function uploadFile(localFile, props, cb) {
	util.requestCloud("qiniu", props, 'POST', {
		success: function(resp) {
			var uptoken = resp.token;
			var bucket = resp.bucket;
			var qiniuUrlPrefix = 'http://' + bucketDomain(bucket) + '.qiniudn.com/';
			if (!uptoken) {
				if (cb) {
					cb(JSON.parse(resp.responseText).error);
					return
				}
			}
			qiniu.io.put(uptoken, props.key, fs.readFileSync(localFile), null, function(err, ret) {
				if (cb) {
					cb(err, qiniuUrlPrefix + (ret ? ret.key : '404.html'), resp.objectId);
				}
			});
		},
		error: function(err) {
			if (cb) {
				cb(err);
			}
		}
	});
}

function deployLocalCloudCode(cloudPath) {
	initMasterKey(function() {
		console.log("Compress cloud code files...");
		var file = tmpdir + new Date().getTime() + '.tar.gz';
		var count = 0;

		fstream.Reader({
			'root': cloudPath,
			'path': cloudPath,
			'type': 'Directory',
			filter: function() {
				count++;
				if (count == 1) {
					//the root folder.
					return true;
				}
				var filePath = path.normalize(this.path);
				return _.find(['cloud', 'public', 'config', 'package.json'], function(folder) {
					return _s.startsWith(filePath, cloudPath + folder);
				});
			}
		}).pipe(tar.Pack({
			path: '.'
		}))
			.pipe(zlib.Gzip())
			.pipe(fstream.Writer({
				'path': file
			}))
			.on('close', function() {
				console.log("Wrote compressed file " + file + ' ...');
				//upload file to cloud code
				console.log("Begin to upload cloud code files...");
				var key = util.guid() + '.tar.gz';
				uploadFile(file, {
					key: key,
					name: file,
					mime_type: 'application/x-gzip, application/octet-stream'
				}, function(err, url, fileId) {
					if (err) {
						console.log("Upload cloud code files failed with '%j'", (JSON.parse(err.responseText).error));
						process.exit(1);
					} else {
						console.log("Upload cloud code files successfully. Begin to deploy...");
						//notify avoscloud platform to fetch new deployment.
						util.requestCloud('functions/deploy/command', {
							revision: url,
							fileId: fileId,
							log: program.log
						}, 'POST', {
							success: function(resp) {
								console.log("Congrats! Deploy cloud code successfully.");
								queryStatus();
							},
							error: function(err) {
								console.log("Sorry, try to deploy cloud code failed with '%s'", (JSON.parse(err.responseText).error));
							}
						}, true);
					}
				});
			});
	});
}

function deployGitCloudCode(revision) {
	initMasterKey(function() {
		console.log('Deploy cloud code from git repository...');
		util.requestCloud('functions/deploy/command', {
			url: program.giturl
		}, 'POST', {
			success: function(resp) {
				console.log("Congrats! Deploy cloud code from git repository successfully.");
				queryStatus();
			},
			error: function(err) {
				console.log("Deployed cloud code from git repository failed with '%j'", (JSON.parse(err.responseText).error));
			}
		}, true);
	});
}

function outputStatus(status) {
	console.log('------------------------------------------------------------------------');
	console.log("Development    version:  '" + status.dev + "'");
	console.log("Development commit log:  '" + status.devLog + "'");
	console.log("Production     version:  '" + status.prod + "'");
	console.log("Production  commit log:  '" + status.prodLog + "'");
}

function publishCloudCode() {
	initMasterKey(function() {
		console.log('Publishing cloud code to production...');
		util.requestCloud('functions/publishFunctions', {}, 'GET', {
			success: function(resp) {
				console.log("Published cloud code successfully. the status is: ");
				outputStatus(resp);
			},
			error: function(err) {
				console.log("Published cloud code failed with '%j'", (JSON.parse(err.responseText).error));
			}
		}, true);
	});
}

function queryStatus() {
	initMasterKey(function() {
		util.requestCloud('functions/status', {}, 'GET', {
			success: function(resp) {
				console.log("Cloud code status is: ");
				outputStatus(resp);
			},
			error: function(err) {
				console.log("Query cloud code status failed with '%j'", (JSON.parse(err.responseText).error));
			}
		}, true);
	});
}

function undeployCloudCode() {
	initMasterKey(function() {
		util.requestCloud('functions/undeploy/repo', {}, 'POST', {
			success: function(resp) {
				console.log("Undeployed cloud code successfully.");
				queryStatus();
			},
			error: function(err) {
				console.log("Undeployed cloud code status failed with '%j'", (JSON.parse(err.responseText).error));
			}
		}, true);
	});
}

var cmd = program.args[0];
var cloudPath = path.resolve(program.filepath || '.');

if (!cloudPath.match(/.*\/$/)) {
	cloudPath = cloudPath + path.sep;
}
console.log('[INFO]: Cloud Code Project Root Directory: ' + cloudPath);
process.chdir(cloudPath);

function input(info, cb, password) {
	var pcb = function(err, anwser){
		cb(anwser);
	};
	if(password){
		promptly.password(info,pcb);
	}else{
		promptly.prompt(info,pcb);
	}
}

function getDeviceId() {
	var home = getUserHome();
	if (!home)
		throw "Could not find user home directory";
	var deviceIdFile = home + path.sep + '.avoscloud_device_id'
	var exists = fs.existsSync(deviceIdFile);
	if(exists){
		return fs.readFileSync(deviceIdFile, { encoding: 'utf-8'});
	}else{
		var deviceId = util.guid();
		fs.writeFileSync(deviceIdFile, deviceId, { encoding: 'utf-8'});
		return deviceId;
	}
};

function sendStats(cmd){
	try{
		var sessionId = util.guid();
		var timestamp = new Date().getTime();
		var data = {
			appId: 'lu348f5799fc5u3eujpzn23acmxy761kq6soyovjc3k6kwrs',
			device: {
				sdk_version: version,
				os_version: (os.platform() + ' ' + os.arch() + ' ' + os.release()),
				device_id: getDeviceId(),
				app_version: version,
				device_model: os.platform(),
				os: 'ios'
			},
			events: {
				event: [{"du":1,"name":cmd,"ts": timestamp}],
				"launch":{"date": timestamp, "sessionId": sessionId},"terminate":{"activities":[],"duration":1,"sessionId": sessionId}
			}
		};
		util.ajax('POST', 'https://cn.avoscloud.com/1/stats/collect', JSON.stringify(data), function(resp){ }, function(err){}, 'lu348f5799fc5u3eujpzn23acmxy761kq6soyovjc3k6kwrs', 'nrit4mhmqzm1euc3n3k9fv3w0wo72v1bdic6tfrl2usxix3e');
	}catch(err){
		//ignore
	}
};

function outputLogs(resp){
	if(resp && resp.results.length > 0){
		resp.results.reverse().forEach(function(log){
			console.log("[%s] [%s] -- %s:  %s", log.createdAt, (log.production == 1 ? 'production':'development'), log.level, log.content);
		});
    }
}

function viewCloudLog(lastLogUpdatedTime){
    var url = 'classes/_CloudLog?order=-updatedAt&limit=' + (lastLogUpdatedTime ? 1000 : (program.lines || 10));
	if(lastLogUpdatedTime){
		var where = {
			createdAt: {
				"$gt": {
					"__type":"Date",
					"iso": lastLogUpdatedTime
				}
			}
		}
		url += '&where=' + encodeURIComponent(JSON.stringify(where));
	}
	initMasterKey(function() {
		util.requestCloud(url , {}, 'GET', {
			success: function(resp) {
				if(resp.results.length > 0){
				    lastLogUpdatedTime = resp.results[0].createdAt;
				}
				outputLogs(resp);
				if(program.tailf){
					setTimeout(function(){ viewCloudLog(lastLogUpdatedTime);}, 500);
				}
			},
			error: function(err) {
				console.log("Query cloud code logs failed with '%j'", (JSON.parse(err.responseText).error));
			}
		}, true);
	});
};

/**
 *Creaet a new avoscloud cloud code project.
 */
function createNewProject() {
	console.log("开始输入应用信息，这些信息可以从'开发者平台的应用设置 -> 应用 key'里找到。")
	input("请输入应用的 Application ID:  ", function(appId) {
		if (!appId || appId.trim() == '')
			throw "无效的 Application ID"
		input("请输入应用的 Master Key: ", function(masterKey) {
			if (!masterKey || masterKey.trim() == '')
				throw "无效的 Master Key"
			input("选择您的应用类型（标准版或者 web 主机版）: [standard(S) or web(W)]", function(type) {
				type = type || 'S'
				var params = '';
				if (type.toUpperCase() == 'W' || type.toUpperCase() == 'WEB') {
					params = '&webHosting=true';
				}
				console.log("Creating project...");
				AV.initialize(appId, masterKey);
				var url = AV.serverURL;
				if (url.charAt(url.length - 1) !== "/") {
					url += "/";
				}
				url += "1/" + 'functions/skeleton?appId=' + appId + "&appKey=" + masterKey + params;
				var file = tmpdir + appId + '.zip';
				exec("curl -k '" + url + "' > " + file, function(err) {
					if (err)
						throw err;
					var zip = new AdmZip(file),
					zipEntries = zip.getEntries();
					zip.extractAllTo('.', false);
					console.log("Project created!");
				});
			});
		}, true);
	});
}

function importFile(f, realPath){
	var stats = fs.statSync(realPath);
	if(stats.isFile()){
		util.checksumFile(realPath ,function(err, checksum){
			if(err){
				return console.error('Upload ' + realPath + ' fails with error: %j', err);
			}
			var extname = path.extname(realPath) != '.' ? path.extname(realPath) : '';
			uploadFile(realPath, {
				key: util.guid() + extname,
				name: path.basename(realPath),
				mime_type: mime.lookup(realPath),
				metaData: {
					size: stats.size,
					_checksum: checksum
				}
			}, function(err, url){
				if(err){
					console.error('Upload ' + realPath + ' fails with error: %j', err);
				}else{
					console.log('Upload ' + realPath + ' successfully as: ' + url);
				}
			});
		});
	}else if (stats.isDirectory()){
		fs.readdir(realPath, function(err, files){
			if(err)
				return console.error("Read directory " + realPath + " fails with error %j", err);
			console.log("Begin to upload files in directory " + realPath);
			files.forEach(function(subFile){
				importFile(subFile, realPath + path.sep + subFile);
			});
		});
	}else {
		console.error(f + ' is not file or directory, ignoring...');
	}
}

/**
 * import files to avoscloud.
 */
function importFiles(files){
	files.forEach(function(f){
		var realPath = path.resolve(f);
		if(fs.existsSync(realPath)){
			importFile(f, realPath);
		} else {
			console.error(f + " not existed, ignoring...");
		}
	});
}

function initAVOSCloudSDK(done) {
	if (fs.existsSync(cloudPath + 'config/global.json')) {
		//try to initialize avoscloud sdk.
		var data = JSON.parse(fs.readFileSync(cloudPath + 'config/global.json', {
			encoding: 'utf-8'
		}));
		if(!data || !data.applicationId || !data.applicationKey)
			throw "Can't initialize AVOS Cloud SDK,plase provide config/global.json"
		AV.initialize(data.applicationId, data.applicationKey);
	}else{
		throw "Can't initialize AVOS Cloud SDK,plase provide config/global.json";
	}
	initMasterKey(function(masterKey){
		if (fs.existsSync(cloudPath + 'config' + path.sep + 'global.json')) {
			//try to initialize avoscloud sdk.
			var data = JSON.parse(fs.readFileSync(cloudPath + 'config' + path.sep + 'global.json', {
				encoding: 'utf-8'
			}));
			if (!data || !data.applicationId || !data.applicationKey){
				console.error("[ERROR]: Can't initialize AVOS Cloud SDK, please provide config/global.json contains app id and app key.");
				program.help();
			}
			if(masterKey){
				AV._initialize(data.applicationId, data.applicationKey, masterKey);
				AV.Cloud.useMasterKey();
			}else {
				AV.initialize(data.applicationId, data.applicationKey);
			}
			if(done)
				done(masterKey);
		} else {
			console.error("[ERROR]: Can't initialize AVOS Cloud SDK.Could not find 'config/global.json'.");
			program.help();
			process.exit(1);
		}
	});
}

sendStats(cmd);

if (!cmd) {
	initAVOSCloudSDK(function(masterKey){
		require(lib + '/mock').run(cloudPath, masterKey);
		console.log("请使用浏览器打开 http://localhost:3000/avos");
	});
} else {
	if (cmd != 'new') {
		initAVOSCloudSDK();
	}
	switch (cmd) {
	case "search":
		if (!program.args[1]) {
			console.log("Useage: avoscloud search <keyword>");
			process.exit(1);
		}
		program.args.shift();
		exec('open https://cn.avoscloud.com/search.html?q=' + encodeURIComponent(program.args.join(' ')));
		break;
	case "deploy":
		if (program.git) {
			deployGitCloudCode(program.revision || 'master');
		} else {
			if(path.resolve(cloudPath) != path.resolve('.'))
				throw "'avoscloud deploy' must be run in a cloud code project directory.";
			deployLocalCloudCode(cloudPath);
		}
		break;
	case "undeploy":
		undeployCloudCode();
		break;
	case "publish":
		publishCloudCode();
		break;
	case "status":
		queryStatus();
		break;
	case 'new':
		createNewProject();
		break;
    case 'logs':
        viewCloudLog();
		break;
	case "clear":
		deleteMasterKeys();
		break;
	case "upload":
		if (!program.args[1]) {
			console.log("Useage: avoscloud upload <file-or-directory>");
			process.exit(1);
		}
		program.args.shift();
		importFiles(program.args);
		break;
	default:
		program.help();
		break;
	}
}
